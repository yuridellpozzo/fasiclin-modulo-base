/*
	DESCRIÇÃO: SCRIPT PARA CRIAÇÃO DO BANCO DE DADOS NO SGBD MYSQL PARA O SISTEMA DA FASICLIN
    AUTOR: PAULO MENDONÇA
    CURSO: ANÁLISE E DESENVOLVIMENTO DE SISTEMAS
    MATÉRIA: PROJETO INTERDISCIPLINAR
    PROFESSOR: JOÃO F. BORBA
    
    SGBD: MYSQL 8
    
    OBSERVAÇÕES IMPORTANTES: ESTE SCRIPT É REFERENTE À CRIAÇÃO DE TABELAS,
							 CHAVES ESTRANGEIRAS, INDICES E ALGUMAS PROCEDURES.
                             FIQUE ATENTO AOS COMENTÁRIOS NA SESSÃO DE PROCEDURES.
                             
	ANTES DE RODAR O SCRIPT, DESCOMENTE O BLOCO DE CRIAÇÃO DAS TABLESPACES QUE SEJA
	COMPATÍVEL COM O SEU SISTEMA OPERACIONAL
    
    BOAS PRÁTICAS RECOMENDADAS: EVITE CONSULTAS USANDO * (SELECT * FROM TABELA)
								REFORCE VALIDAÇÕES DE DADOS NO SEU CÓDIGO
                                TRATE OS DADOS E REMOVA CARACTERES COMO ' E --
    
    DICIONÁRIO DE DADOS: https://docs.google.com/spreadsheets/d/1SN4MOWjVLznh8bgQZDRrbRIS8TKq17xfaxqyxjxGZd0/edit?usp=sharing
    
    ALTERAÇÕES:
		 _______________________________________________________________________________________________________
		|	DATA	|							ACÃO							|		MODULOS AFETADOS		|
        ---------------------------------------------------------------------------------------------------------
        | 21/05/25	| CREATE TABLE LOCCOLET  									| BIOMEDICINA					|
		| 21/05/25	| ADD COLUMNS MOTCANC, FATORRH, TPSANGUI IN RESULEXAME		| BIOMEDICIONA					|
        | 21/05/25	| ADD DEFAULT VALUE FOR STATUSPAC IN PACIENTE				| *								|
        | 21/05/25	| REMOVE COLUMN DESCRICAO IN SOLIODONTO						| ODONTOLOGIA					|
        | 21/05/25	| ADD COLUMN MOTNEG IN SOLIODONTO							| ODONTOLOGIA					|
        | 22/05/25	| ADD COLUMNS NOMERESP, CPFRESP IN ANAMNESE					| ENF, ODON, NUTR, PSI, FISIO	|
        | 22/05/25	| REMOVE CONSTRAINT NOT NULL IN ID_PROFISSIO IN AGENDA		| AGENDA						|
        | 26/05/25	| ADD COLUMN DATAVENC IN LOTE								| COMPRAS						|
        | 26/05/25	| ADD COLUMNS CONTREPRE, DESCRICAO IN FORNECEDOR			| COMPRAS						|
        | 26/05/25	| ADD COLUMN ID_LOTE IN PRODUTO								| COMPRAS						|
        | 26/05/25	| REMOVE COLUMN ID_SETOR IN LOTE							| COMPRAS						|
        | 26/05/25	| CREATE TABLE SETORUSUA									| COMPRAS						|
        | 26/05/25	| CREATE TABLE COTACAO										| COMPRAS						|
        | 26/05/25	| REMOVE COLUMN ID_FORNECEDOR IN ORDEMCOMPRA				| COMPRAS						|
        | 26/05/25	| CREATE TABLE ALMOXARIFADO									| COMPRAS						|
        | 26/05/25	| ADD COLUMN ID_ALMOX IN PRODUTO							| COMPRAS						|
        | 26/05/25	| REMOVE CONSTRAINT NOT NULL OF ID_AGENDA IN RESULEXAME		| BIOMEDICINA					|
        | 26/05/25	| REMOVE COLUMNS TPSANGUI, FATORRH IN RESULEXAME			| BIOMEDICINA					|
        | 26/05/25	| ADD COLUMNS ID_PROCED, ID_PACIENTE IN RESULEXAME			| BIOMEDICINA					|
        | 27/05/25	| CREATE TABLE PERMIUSUA									| AGENDA, RH					|
        | 27/05/25	| ADD COLUMNS IDPESSOA, IDPESSOAFIS IN VW_PESSOAFIS			| *								|
        | 30/05/25	| REMOVE COLUMN ID_USUARIO IN PERMIUSUA						| AGENDA, RH					|
        | 30/05/25	| CREATE TABLE USUAPERMIUSUA								| AGENDA, RH					|
        | 30/05/25	| CREATE ADD COLUMNS STATUSCOT, MOTNEG IN COTACAO			| COMPRAS						|
        | 05/06/25	| ADD COLUMN SITUAGEN IN AGENDA								| AGENDA						|
        | 05/06/25	| CREATE TABLE PROCPRESC									| FISIOTERAPIA					|
        | 05/06/25	| CREATE TABLE PROCPRESCAGE									| FISIOTERAPIA					|
        | 05/06/25	| CREATE TABLE PROCPRESCATE									| FISIOTERAPIA					|
        | 05/06/25	| CREATE TABLE ESPECPROCED									| *								|
		| 05/06/25	| REMOVE COLUMN MODULO IN ANAMNESE							| ENF, ODON, NUTR, PSI, FISIO	|
        | 05/06/25	| ADD CONSTRAINT UNIQUE ON PERGUNTA IN PERGUNTA				| ENF, ODON, NUTR, PSI, FISIO	|
        | 05/06/25	| CREATE TABLE MODULO										| ENF, ODON, NUTR, PSI, FISIO	|
        | 05/06/25	| CREATE TABLE PERGMODU										| ENF, ODON, NUTR, PSI, FISIO	|
        | 05/06/25	| ALTER TYPE OF PERGUNTA IN PERGUNTA (TEXT -> VARCHAR(255))	| ENF, ODON, NUTR, PSI, FISIO	|
        | 05/06/25	| CREATE PROCEDURE SP_INSERT_PERGUNTA						| ENF, ODON, NUTR, PSI, FISIO	|
        | 05/06/25	| CREATE VIEW VW_PERGUNTA_ANAMNESE							| ENF, ODON, NUTR, PSI, FISIO	|
        | 15/06/25	| ADD COLUMN DESCRCOMP IN AGENDA							| AGENDA						|
        | 16/06/25	| ADD COLUMNS DATANOVA AND MOTCANC IN AGENDA				| AGENDA						|
        | 19/06/25	| RENAME COLUMN MOTCANC TO MOTIALT IN AGENDA				| AGENDA						|
        | 19/06/25	| ADD COLUMN SOLICMASTER IN AGENDA							| AGENDA						|
        | 19/06/25	| ADD COLUMN ID_PROFISSIO IN RESULEXAME						| BIOMEDICINA					|
        | 22/06/25	| ADD COLUMN ID_METOEXAME IN RESULEXAME						| BIOMEDICINA					|
        | 24/06/25	| REMOVE COLUMN ID_LOTE IN PRODUTO							| ESTOQUE, COMPRAS				|
        | 24/06/25	| ADD COLUMN CODBARRAS IN PRODUTO							| ESTOQUE, COMPRAS				|
        | 24/06/25	| ADD COLUMN TEMPIDEAL IN PRODUTO							| ESTOQUE, COMPRAS				|
        | 24/06/25	| CREATE TABLE FORNECPROD									| COMPRAS						|
        | 24/06/25	| CREATE TABLE ESTOQUE										| ESTOQUE, COMPRAS				|
        | 24/06/25	| CREATE TABLE MOVIMENTACAO									| ESTOQUE						|
        | 24/06/25	| CREATE TABLE PRODSOLIC									| ESTOQUE						|
        | 24/06/25	| CREATE TABLE LISTAPRODSOL									| ESTOQUE						|
        | 24/06/25	| CREATE TABLE RELATMOVIM									| ESTOQUE						|	
        | 24/06/25	| CREATE TABLE RELATMOVIMMOVIM								| ESTOQUE						|
        | 24/06/25	| CREATE TABLE MOVPRODSOL									| ESTOQUE						|
        | 01/07/25	| REMOVE CONSTRAINT NOT NULL ON ID_PROFISSIO IN USUARIO		| *								|
        | 01/07/25	| ADD COLUMN ID_PESSOAFIS IN USUARIO						| *								|
        | 01/07/25	| CREATE TABLE LISTAPRODSOLSOL								| ESTOQUE						|
        | 01/07/25	| ADD COLUMN ID_LISTAPRODSOL IN PRODSOLIC					| ESTOQUE						|
        | 03/07/25	| ADD COLUMNS GESTANTE AND JEJUM IN REFPROCED				| BIMEDICINA					|
        | 03/07/25	| CREATE TABLE EXERCICIO									| FISIOTERAPIA					|
        | 03/07/25	| CREATE TABLE EXERCPRESC									| FISIOTERAPIA					|
        | 03/07/25	| CREATE TABLE EXERCREALIZADO								| FISIOTERAPIA					|
        | 06/07/25	| CREATE TABLE ATENDIFISIO									| FISIOTERAPIA					|
        | 06/07/25	| CREATE TABLE TOKENFISIO									| FISIOTERAPIA					|
        | 09/07/25	| ADD COLUMN OBSERVACAO IN EXERCREALIZADO					| FISIOTERAPIA					|
        ´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´
*/
START TRANSACTION;
-- TABLESPACES --
/*
	-- PARA SISTEMAS GNU/LINUX --
    
CREATE TABLESPACE TS_AGENDA
	ADD DATAFILE '/var/lib/mysql/TS_AGENDA.ibd'
    ENGINE=InnoDB;

CREATE TABLESPACE TS_PRONTUARIO
	ADD DATAFILE '/var/lib/mysql/TS_PRONTUARIO.ibd'
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_RH
	ADD DATAFILE '/var/lib/mysql/TS_RH.ibd'
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_VENDA
	ADD DATAFILE '/var/lib/mysql/TS_VENDA.ibd'
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_CONTABIL
	ADD DATAFILE '/var/lib/mysql/TS_CONTABIL.ibd'
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_COMPRA
	ADD DATAFILE '/var/lib/mysql/TS_COMPRA.ibd'
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_ESTETCOSME
	ADD DATAFILE '/var/lib/mysql/TS_ESTETCOSME.ibd'
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_ENFERMAGEM
	ADD DATAFILE '/var/lib/mysql/TS_ENFERMAGEM.ibd'
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_NUTRICAO
	ADD DATAFILE '/var/lib/mysql/TS_NUTRICAO.ibd'
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_BIOMEDICINA
	ADD DATAFILE '/var/lib/mysql/TS_BIOMEDICINA.ibd'
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_ODONTOLOGIA
	ADD DATAFILE '/var/lib/mysql/TS_ODONDOLOGIA.ibd'
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_FISIOTERAPIA
	ADD DATAFILE '/var/lib/mysql/TS_FISIOTERAPIA.ibd'
    ENGINE=InnoDB;
*/

-- ############################################################ --

/*
-- PARA SISTEMAS WINDOWS --

CREATE TABLESPACE TS_AGENDA
    ENGINE=InnoDB;

CREATE TABLESPACE TS_PRONTUARIO
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_RH
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_VENDA
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_CONTABIL
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_COMPRA
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_ESTETCOSME
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_ENFERMAGEM
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_NUTRICAO
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_BIOMEDICINA
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_ODONTOLOGIA
    ENGINE=InnoDB;
    
CREATE TABLESPACE TS_FISIOTERAPIA
    ENGINE=InnoDB;
*/

-- BANCO --

DROP DATABASE IF EXISTS fasiclin;
CREATE DATABASE fasiclin;
USE fasiclin;

-- TABELAS --

CREATE TABLE PESSOA(
	IDPESSOA INT PRIMARY KEY AUTO_INCREMENT,
    TIPOPESSOA ENUM('F','J') NOT NULL
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE PESSOAFIS(
	IDPESSOAFIS INT PRIMARY KEY AUTO_INCREMENT,
    ID_PESSOA INT NOT NULL UNIQUE,
    CPFPESSOA CHAR(11) NOT NULL UNIQUE,
    NOMEPESSOA VARCHAR(100) NOT NULL,
    DATANASCPES DATE NOT NULL,
    SEXOPESSOA ENUM('M','F') NOT NULL,
    DATACRIACAO DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE PESSOAJUR(
	IDPESSOAJUR INT PRIMARY KEY AUTO_INCREMENT,
    ID_PESSOA INT NOT NULL UNIQUE,
	CNPJ CHAR(14) NOT NULL UNIQUE,
	RAZSOCIAL VARCHAR(100) NOT NULL,
	NOMEFAN VARCHAR(100) NOT NULL,
	CNAE CHAR(7),
	DATACRIACAO DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	TIPOENDER ENUM('COM', 'RES') NOT NULL,
	ID_TIPOLOGRA INT NOT NULL,
	LOGRADOURO VARCHAR(100) NOT NULL,
	NUMEENDER VARCHAR(10) NOT NULL,
	COMPLEMENTO VARCHAR(100),
	BAIRRO VARCHAR(100) NOT NULL,
    CEP CHAR(8) NOT NULL,
	ID_CIDADE INT NOT NULL,
	ID_PESSOA INT NOT NULL
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE CONTATO(
	IDCONTATO INT PRIMARY KEY AUTO_INCREMENT,
	ID_TIPOCONTATO INT NOT NULL,
	NUMERO VARCHAR(12),
	ID_PESSOA INT NOT NULL
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE EMAIL(
	IDEMAIL INT PRIMARY KEY AUTO_INCREMENT,
	EMAIL VARCHAR(100) NOT NULL,
	ID_PESSOA INT NOT NULL
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE TIPOLOGRADO(
	IDTIPOLOGRA INT PRIMARY KEY AUTO_INCREMENT,
	TIPO VARCHAR(20) NOT NULL UNIQUE
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE CIDADE(
	IDCIDADE INT PRIMARY KEY AUTO_INCREMENT,
	CIDADE VARCHAR(100) NOT NULL,
	ESTADO CHAR(2) NOT NULL
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE TIPOCONTATO(
	IDTIPOCONTATO INT PRIMARY KEY AUTO_INCREMENT,
	TIPO VARCHAR(20) NOT NULL UNIQUE
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE AGENDA(
	IDAGENDA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PESSOAFIS INT,
	ID_PROFISSIO INT NOT NULL,
	ID_PROCED INT NOT NULL,
    SOLICMASTER BOOLEAN,
    DESCRCOMP VARCHAR(250),
    DATANOVA DATETIME DEFAULT NULL,
	DATAABERT DATETIME NOT NULL,
    SITUAGEN ENUM('1','2','3') NOT NULL DEFAULT '1',
    MOTIALT VARCHAR(100) DEFAULT NULL
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	ID_PESSOAFIS INT NOT NULL UNIQUE,
	RGPACIENTE VARCHAR(15) NOT NULL UNIQUE,
	ESTDORGPAC ENUM('AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA',
					'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN',
					'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'),
	STATUSPAC BOOLEAN NOT NULL DEFAULT TRUE
)
TABLESPACE TS_AGENDA
STORAGE DISK;

CREATE TABLE PRONTUARIO(
	IDPRONTU INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT NOT NULL,
	ID_PROFISSIO INT NOT NULL,
	ID_ESPEC INT NOT NULL,
	ID_PROCED INT NOT NULL,
	DATAPROCED DATE NOT NULL,
	DESCRPRONTU TEXT NOT NULL,
	LINKPROCED VARCHAR(250),
	AUTOPACVISU BOOLEAN NOT NULL
)
TABLESPACE TS_PRONTUARIO
STORAGE DISK;

CREATE TABLE PROCEDIMENTO(
	IDPROCED INT PRIMARY KEY AUTO_INCREMENT,
	CODPROCED CHAR(8) NOT NULL UNIQUE,
	DESCRPROC VARCHAR(250) NOT NULL,
	VALORPROC DECIMAL(10,2) NOT NULL
)
TABLESPACE TS_PRONTUARIO
STORAGE DISK;

CREATE TABLE PROFISSIONAL(
	IDPROFISSIO INT PRIMARY KEY AUTO_INCREMENT,
	ID_PESSOAFIS INT NOT NULL UNIQUE,
	TIPOPROFI ENUM('1','2','3','4') NOT NULL,
	ID_SUPPROFI INT,
	STATUSPROFI ENUM('1','2','3'),
	ID_CONSEPROFI INT NOT NULL
)
TABLESPACE TS_RH
STORAGE DISK;

CREATE TABLE CONSEPROFI(
	IDCONSEPROFI INT PRIMARY KEY AUTO_INCREMENT,
	DESCRICAO VARCHAR(100) NOT NULL UNIQUE,
	ABREVCONS CHAR(10) NOT NULL UNIQUE
)
TABLESPACE TS_RH
STORAGE DISK;

CREATE TABLE PROFI_ESPEC(
	IDPROFI_ESPEC INT PRIMARY KEY AUTO_INCREMENT,
	ID_PROFISSIO INT NOT NULL,
	ID_ESPEC INT NOT NULL
)
TABLESPACE TS_RH
STORAGE DISK;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	ID_PROFISSIO INT,
    ID_PESSOAFIS INT,
	LOGUSUARIO VARCHAR(100) NOT NULL UNIQUE,
	SENHAUSUA VARCHAR(250) NOT NULL
)
TABLESPACE TS_RH
STORAGE DISK;

CREATE TABLE PERMIUSUA(
	IDPERMIUSUA INT PRIMARY KEY AUTO_INCREMENT,
    DESCPERMI VARCHAR(50) NOT NULL UNIQUE
)
TABLESPACE TS_RH
STORAGE DISK;

CREATE TABLE USUAPERMIUSUA(
	IDUSUAPERMIUSUA INT PRIMARY KEY AUTO_INCREMENT,
	ID_USUARIO INT NOT NULL,
	ID_PERMIUSUA INT NOT NULL
)
TABLESPACE TS_RH
STORAGE DISK;

CREATE TABLE ESPECIALIDADE(
	IDESPEC INT PRIMARY KEY AUTO_INCREMENT,
	CODESPEC CHAR(2) NOT NULL UNIQUE,
	DESCESPEC VARCHAR(100)
)
TABLESPACE TS_PRONTUARIO
STORAGE DISK;

CREATE TABLE ESPECPROCED(
	IDESPECPROCED INT PRIMARY KEY AUTO_INCREMENT,
	ID_PROCED INT NOT NULL,
	ID_ESPEC INT NOT NULL
)
TABLESPACE TS_PRONTUARIO
STORAGE DISK;

CREATE TABLE VENDA(
	IDVENDA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PESSOA INT NOT NULL,
	VALORVENDA DECIMAL(10,2) NOT NULL,
	DATAPAG DATE NOT NULL,
	FORMPAG ENUM('1','2') NOT NULL
)
TABLESPACE TS_VENDA
STORAGE DISK;

CREATE TABLE ITEMVENDA(
	IDITEMVENDA INT PRIMARY KEY AUTO_INCREMENT,
	ID_VENDA INT NOT NULL,
	QTDITEM INT NOT NULL,
	ID_ESPEC INT NOT NULL,
	ID_PRECED INT NOT NULL,
	ID_PROFISSIO INT NOT NULL
)
TABLESPACE TS_VENDA
STORAGE DISK;

CREATE TABLE PLANOCONTA(
	IDPLANOCONTA INT PRIMARY KEY AUTO_INCREMENT,
	CODPLANO INT NOT NULL,
	TIPO ENUM('AT','PA','PL','RC','DP') NOT NULL,
	DESCRICAO VARCHAR(250)
)
TABLESPACE TS_CONTABIL
STORAGE DISK;

CREATE TABLE MOVCONTABIL(
	IDMOVCONTAB INT PRIMARY KEY AUTO_INCREMENT,
	NUMELANCAM INT NOT NULL UNIQUE,
	DATALANCAME DATE,
	ID_ORDCOMP INT,
	ID_ITEMVENDA INT,
	ID_PLANOCONTA INT NOT NULL,
	VALDBTO DECIMAL(10,2) NOT NULL,
	VALCDTO DECIMAL(10,2) NOT NULL
)
TABLESPACE TS_CONTABIL
STORAGE DISK;

CREATE TABLE INSCRIFISCAL(
	IDINSCRIFI INT PRIMARY KEY AUTO_INCREMENT,
	NUMESCFISC INT NOT NULL,
	DATAINSCRI DATE NOT NULL,
	ID_MOVCONTAB INT NOT NULL,
	VALOR DECIMAL(10,2)
)
TABLESPACE TS_CONTABIL
STORAGE DISK;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50) NOT NULL,
	DESCRICAO VARCHAR(250) NOT NULL,
    ID_ALMOX INT,
	ID_UNMEDI INT NOT NULL,
    CODBARRAS VARCHAR(250),
    TEMPIDEAL DECIMAL(3,1),
	STQMAX INT NOT NULL,
	STQMIN INT NOT NULL,
	PNTPEDIDO INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE FORNECPROD(
	IDFORNECPROD INT PRIMARY KEY AUTO_INCREMENT,
	ID_FORNECEDOR INT NOT NULL,
	ID_PRODUTO INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE ESTOQUE(
	IDESTOQUE INT PRIMARY KEY AUTO_INCREMENT,
	ID_PRODUTO INT NOT NULL,
	ID_LOTE INT NOT NULL,
	QTDESTOQUE INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE MOVIMENTACAO(
	IDMOVIMENTACAO INT PRIMARY KEY AUTO_INCREMENT,
	ID_ESTOQUE INT NOT NULL,
	ID_USUARIO INT NOT NULL,
	ID_SETOR_ORIGEM INT NOT NULL,
	ID_SETOR_DESTINO INT NOT NULL,
	QTDMOVIM INT NOT NULL,
	DATAMOVIM DATE NOT NULL,
	TIPOMOVIM ENUM('ENTRADA', 'SAIDA') NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE PRODSOLIC(
	IDPRODSOLIC INT PRIMARY KEY AUTO_INCREMENT,
	ID_ESTOQUE INT NOT NULL,
    ID_LISTAPRODSOL INT NOT NULL,
	DATARETIR DATE,
	STATUSPRODSOL ENUM('1','2','3','4','5') NOT NULL,
	QTDSOLIC INT NOT NULL,
	QTDENTREGUE INT,
	QTDDISPON INT NOT NULL,
	RESERVTEMP BOOLEAN NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE LISTAPRODSOL(
	IDLISTAPRODSOL INT PRIMARY KEY AUTO_INCREMENT,
	ID_USUARIO INT NOT NULL,
	DATASOLIC DATE NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE LISTAPRODSOLSOL(
	IDLISTAPRODSOLSOL INT PRIMARY KEY AUTO_INCREMENT,
    ID_LISTAPRODSOL INT NOT NULL,
	ID_PRODSOLIC INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE RELATMOVIM(
	IDRELATMOVIM INT PRIMARY KEY AUTO_INCREMENT,
	DATAEMIS DATE NOT NULL,
	DATAFIM DATE NOT NULL,
	DATAINIC DATE NOT NULL,
	TITUREL VARCHAR(100) NOT NULL,
	ID_USUARIO INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE RELATMOVIMMOVIM(
	IDRELATMOVIMMOVIM INT PRIMARY KEY AUTO_INCREMENT,
	ID_RELATMOVIM INT NOT NULL,
	ID_MOVIMENTACAO INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE MOVPRODSOL(
	IDMOVPRODSOL INT PRIMARY KEY AUTO_INCREMENT,
	ID_LISTAPRODSOL INT NOT NULL,
	ID_MOVIMENTACAO INT NOT NULL,
	ID_PRODSOLIC INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE UNIMEDIDA(
	IDUNMEDI INT PRIMARY KEY AUTO_INCREMENT,
	DESCRICAO VARCHAR(50) NOT NULL,
	UNIABREV CHAR(3) NOT NULL UNIQUE
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE FORNECEDOR(
	IDFORNECEDOR INT PRIMARY KEY AUTO_INCREMENT,
	ID_PESSOA INT NOT NULL UNIQUE,
	REPRESENT VARCHAR(100),
    CONTREPRE CHAR(15),
    DECRICAO VARCHAR(250)
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE ORDEMCOMPRA(
	IDORDCOMP INT PRIMARY KEY AUTO_INCREMENT,
	STATUSORD ENUM('PEND', 'ANDA', 'CONC') NOT NULL,
	VALOR DECIMAL(10,2) NOT NULL,
	DATAPREV DATE NOT NULL,
	DATAORDEM DATE NOT NULL,
	DATAENTRE DATE NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE ITEM_ORDCOMP(
	IDITEMORD INT PRIMARY KEY AUTO_INCREMENT,
	ID_ORDCOMP INT NOT NULL,
	ID_PRODUTO INT NOT NULL,
	QNTD INT NOT NULL,
	VALOR DECIMAL(10,2) NOT NULL,
	DATAVENC DATE NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE LOTE(
	IDLOTE INT PRIMARY KEY AUTO_INCREMENT,
	ID_ORDCOMP INT NOT NULL,
    DATAVENC DATE NOT NULL,
	QNTD INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE SETOR(
	IDSETOR INT PRIMARY KEY AUTO_INCREMENT,
	ID_PROFISSIO INT NOT NULL,
	NOMESETOR VARCHAR(50) NOT NULL UNIQUE
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE ALMOXARIFADO(
	IDALMOX INT PRIMARY KEY AUTO_INCREMENT,
	ID_SETOR INT NOT NULL,
	NOMEALMO VARCHAR(100) NOT NULL UNIQUE
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE REGSOLIC(
	IDREGSOLIC INT PRIMARY KEY AUTO_INCREMENT,
	ID_PROFISSIO INT NOT NULL,
	DATASOLIC DATE NOT NULL,
	ID_SETOR INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE ITEMSOLIC(
	IDITEMSOLIC INT PRIMARY KEY AUTO_INCREMENT,
	ID_REGSOLIC INT NOT NULL,
	ID_PRODUTO INT NOT NULL,
	QNTD INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE COTACAO(
	IDCOTACAO INT PRIMARY KEY AUTO_INCREMENT,
	ID_ITEMSOLIC INT NOT NULL,
	ID_REGSOLIC INT NOT NULL,
	ID_FORNECEDOR INT NOT NULL,
	VALORCOT DECIMAL(10,2) NOT NULL,
	OBSERVACAO VARCHAR(250),
    STATUSCOT ENUM('PENDENTE', 'APROVADO', 'NEGADO') DEFAULT 'PENDENTE',
    MOTNEG VARCHAR(250)
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE SETORUSUA(
	IDSETUSUA INT PRIMARY KEY AUTO_INCREMENT,
	ID_USUARIO INT NOT NULL,
	ID_SETOR INT NOT NULL
)
TABLESPACE TS_COMPRA
STORAGE DISK;

CREATE TABLE EQUIPAMENTO(
	IDEQUIPA INT PRIMARY KEY AUTO_INCREMENT,
	NOMEQUIPA VARCHAR(50) NOT NULL UNIQUE,
	ID_SETOR INT NOT NULL
)
TABLESPACE TS_ESTETCOSME
STORAGE DISK;

CREATE TABLE MANUTEQUIPA(
	IDMANUTEQUIPA INT PRIMARY KEY AUTO_INCREMENT,
	ID_EQUIPA INT NOT NULL,
	ID_PESSOAJUR INT NOT NULL,
	NOMETEC VARCHAR(100),
	CUSTOMANUT DECIMAL(10,2),
	STATUSMANU ENUM('1','2','3')
)
TABLESPACE TS_ESTETCOSME
STORAGE DISK;

CREATE TABLE ANAMNESE(
	IDANAMNESE INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT NOT NULL,
	ID_PROFISSIO INT NOT NULL,
	DATAANAM DATETIME NOT NULL,
    NOMERESP VARCHAR(100),
    CPFRESP CHAR(11),
	AUTVISIB BOOLEAN NOT NULL,
	STATUSANM ENUM('APROVADO','REPROVADO','CANCELADO') NOT NULL,
	STATUSFUNC BOOLEAN NOT NULL,
	OBSERVACOES TEXT
)
TABLESPACE TS_ENFERMAGEM
STORAGE DISK;

CREATE TABLE PERGUNTA(
	IDPERGUNTA INT PRIMARY KEY AUTO_INCREMENT,
	PERGUNTA VARCHAR(255) NOT NULL UNIQUE,
	TIPO ENUM('O','S','A') NOT NULL
)
TABLESPACE TS_ENFERMAGEM
STORAGE DISK;

CREATE TABLE MODULO(
	IDMODULO INT PRIMARY KEY AUTO_INCREMENT,
    MODULO VARCHAR(50) NOT NULL UNIQUE
)
TABLESPACE TS_ENFERMAGEM
STORAGE DISK;

CREATE TABLE PERGMODU(
	IDPERGMODU INT PRIMARY KEY AUTO_INCREMENT,
    ID_PERGUNTA INT NOT NULL,
    ID_MODULO INT NOT NULL
)
TABLESPACE TS_ENFERMAGEM
STORAGE DISK;

CREATE TABLE RESPOSTA(
	IDRESPOSTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PERGUNTA INT NOT NULL,
	ID_ANAMNESE INT NOT NULL,
	RESPSUBJET TEXT,
	RESPOBJET BOOLEAN
)
TABLESPACE TS_ENFERMAGEM
STORAGE DISK;

CREATE TABLE PROCPRESC(
	IDPROCPRESC INT PRIMARY KEY AUTO_INCREMENT,
	ID_ANAMNESE INT NOT NULL,
	ID_PROCED INT NOT NULL,
	PROCEDQTD INT NOT NULL,
	IMAGEMPROC VARCHAR(250),
	ORIENTACAO VARCHAR(250)
)
TABLESPACE TS_FISIOTERAPIA
STORAGE DISK;

CREATE TABLE PROCPRESCAGE(
	IDPROCPRESCAGE INT PRIMARY KEY AUTO_INCREMENT,
	ID_PROCPRESC INT NOT NULL,
	ID_AGENDA INT NOT NULL
)
TABLESPACE TS_FISIOTERAPIA
STORAGE DISK;

CREATE TABLE PROCPRESCATE(
	IDPROCPRESCATE INT PRIMARY KEY AUTO_INCREMENT,
	ID_PROCPRESC INT NOT NULL,
	ID_PRONTU INT NOT NULL,
	STATUSATE BOOLEAN NOT NULL DEFAULT FALSE
)
TABLESPACE TS_FISIOTERAPIA
STORAGE DISK;

CREATE TABLE EXERCICIO(
	IDEXERCICIO INT PRIMARY KEY AUTO_INCREMENT,
	DESCREXERC VARCHAR(250) NOT NULL,
	LINKVIDEO VARCHAR(250)
)
TABLESPACE TS_FISIOTERAPIA
STORAGE DISK;

CREATE TABLE EXERCPRESC(
	IDEXERCPRESC INT PRIMARY KEY AUTO_INCREMENT,
	ID_EXERCICIO INT NOT NULL,
	ID_ANAMNESE INT NOT NULL,
	QTDEXERC INT NOT NULL,
	ORIENTACAO TEXT
)
TABLESPACE TS_FISIOTERAPIA
STORAGE DISK;

CREATE TABLE EXERCREALIZADO(
	IDEXERCREALIZADO INT PRIMARY KEY AUTO_INCREMENT,
	ID_EXERCPRESC INT NOT NULL,
	DATAHORA DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    OBSERVACAO VARCHAR(100)
)
TABLESPACE TS_FISIOTERAPIA
STORAGE DISK;

CREATE TABLE TOKENFISIO(
	IDTOKENFISIO INT PRIMARY KEY AUTO_INCREMENT,
	ID_ANAMNESE INT NOT NULL UNIQUE,
	TOKEN CHAR(5) NOT NULL UNIQUE
)
TABLESPACE TS_FISIOTERAPIA
STORAGE DISK;

CREATE TABLE ATENDIFISIO(
	IDATENDIFISIO INT PRIMARY KEY AUTO_INCREMENT,
    ID_PACIENTE INT NOT NULL,
    ID_PROFISSIO INT NOT NULL,
    ID_PROCED INT NOT NULL,
    DATAATENDI DATE NOT NULL,
    DESCRATENDI VARCHAR(250)
)
TABLESPACE TS_FISIOTERAPIA
STORAGE DISK;

CREATE TABLE AVALNUTRI(
	IDAVALNUTRI INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT NOT NULL,
	ID_PROFISSIO INT NOT NULL,
	ID_PROCED INT NOT NULL,
	DATAAVAL DATE NOT NULL,
	HISTOCLIN TEXT NOT NULL,
	ID_RESULEXAME INT NOT NULL,
	AVALANTRO TEXT NOT NULL,
	CIRCUNCEF DECIMAL(10,2) NOT NULL,
	CIRCUNBRA DECIMAL(10,2) NOT NULL,
	CIRCUNPUN DECIMAL(10,2) NOT NULL,
	CIRCUNCIN DECIMAL(10,2) NOT NULL,
	CIRCUNQUA DECIMAL(10,2) NOT NULL,
	CIRCUNPAN DECIMAL(10,2) NOT NULL,
	CIRCUNDOBCUT DECIMAL(10,2) NOT NULL,
	CIRCUNDOBCUTSE DECIMAL(10,2) NOT NULL,
	CIRCUNDOBCUTBI DECIMAL(10,2) NOT NULL,
	CIRCUNDOBCUTAB DECIMAL(10,2) NOT NULL,
	CIRCUNDOBCUTSUP DECIMAL(10,2) NOT NULL,
	CIRCUNDOBCUTPAN DECIMAL(10,2) NOT NULL,
	CIRCUNDOBCUTCOX DECIMAL(10,2) NOT NULL,
	PLANALIMENT DECIMAL(10,2) NOT NULL
)
TABLESPACE TS_NUTRICAO
STORAGE DISK;

CREATE TABLE EVOLNUTRI(
	IDEVOLNUTRI INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT NOT NULL,
	MOTIVACAO VARCHAR(250) NOT NULL,
	HISTODOENCA TEXT NOT NULL,
	DIAGCLIN TEXT NOT NULL,
	EXAMFIS TEXT NOT NULL,
	SINTGASTRO TEXT NOT NULL
)
TABLESPACE TS_NUTRICAO
STORAGE DISK;

CREATE TABLE METODEXAME(
	IDMETODEXAME INT PRIMARY KEY AUTO_INCREMENT,
	NOMEMETOD VARCHAR(100) NOT NULL UNIQUE,
	DESCRICAO TEXT NOT NULL,
	ID_PROCED INT NOT NULL
)
TABLESPACE TS_BIOMEDICINA
STORAGE DISK;

CREATE TABLE LOCCOLET(
	IDLOCCOLET INT PRIMARY KEY AUTO_INCREMENT,
    DESCRICAO VARCHAR(100) NOT NULL UNIQUE
)
TABLESPACE TS_BIOMEDICINA
STORAGE DISK;

CREATE TABLE REFPROCED(
	IDREFPROCED INT PRIMARY KEY AUTO_INCREMENT,
	ID_PROCED INT NOT NULL,
	DESCRICAO VARCHAR(100) NOT NULL UNIQUE,
	VALMIN DECIMAL(15,5),
	VALMAX DECIMAL(15,5),
	IDADEMIN INT,
	IDADEMAX INT,
    GESTANTE BOOLEAN,
    JEJUM BOOLEAN,
	OBSERV VARCHAR(250)
)
TABLESPACE TS_BIOMEDICINA
STORAGE DISK;

CREATE TABLE RESULEXAME(
	IDRESULEXAME INT PRIMARY KEY AUTO_INCREMENT,
	ID_AGENDA INT,
    ID_PROCED INT,
    ID_METODEXAME INT,
    ID_PACIENTE INT,
    ID_PROFISSIO INT,
    DATACOLE DATE NOT NULL,
    ID_LOCCOLET INT NOT NULL,
    GESTANTE BOOLEAN,
    JEJUM BOOLEAN,
	RESULTADO VARCHAR(250),
	OBSERVACAO TEXT,
	STATUSEXA ENUM('PEND','ANDA','CONC','CANC') NOT NULL,
    MOTCANC VARCHAR(250)
)
TABLESPACE TS_BIOMEDICINA
STORAGE DISK;

CREATE TABLE ATENDIODONTO(
	IDATENDIODONTO INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT NOT NULL,
	ID_PROFISSIO INT NOT NULL,
	ID_PROCED INT NOT NULL,
	DATAHORA DATETIME NOT NULL,
	MOTCONSUL VARCHAR(250) NOT NULL,
	DESCPROCED VARCHAR(250) NOT NULL,
	OBSERVACOES VARCHAR(250) NOT NULL
)
TABLESPACE TS_ODONTOLOGIA
STORAGE DISK;

CREATE TABLE SOLIODONTO(
	IDSOLIODONTO INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT NOT NULL,
	ID_PROFISSIO INT,
	ID_PROCED INT NOT NULL,
	ID_USUARIO INT NOT NULL,
	DATASOL DATETIME NOT NULL,
	STATUSSOLI ENUM('P', 'A', 'N') NOT NULL,
    MOTNEG VARCHAR(250)
)
TABLESPACE TS_ODONTOLOGIA
STORAGE DISK;


-- CONSTRAINTS DE CHAVES ESTRANGEIRAS --

ALTER TABLE RESULEXAME
	ADD CONSTRAINT FK_RESULEXAME_PROFISSIONAL
    FOREIGN KEY (ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);

ALTER TABLE PESSOAFIS
	ADD CONSTRAINT FK_PESSOAFIS_PESSOA
    FOREIGN KEY(ID_PESSOA)
    REFERENCES PESSOA(IDPESSOA);
    
ALTER TABLE PESSOAJUR
	ADD CONSTRAINT FK_PESSOAJUR_PESSOA
    FOREIGN KEY(ID_PESSOA)
    REFERENCES PESSOA(IDPESSOA);
    
ALTER TABLE ENDERECO
	ADD CONSTRAINT FK_ENDERECO_TIPOLOGRADO
    FOREIGN KEY(ID_TIPOLOGRA)
    REFERENCES TIPOLOGRADO(IDTIPOLOGRA);
    
ALTER TABLE ENDERECO
	ADD CONSTRAINT FK_ENDERECO_CIDADE
    FOREIGN KEY(ID_CIDADE)
    REFERENCES CIDADE(IDCIDADE);
    
ALTER TABLE ENDERECO
	ADD CONSTRAINT FK_ENDERECO_PESSOA
    FOREIGN KEY(ID_PESSOA)
    REFERENCES PESSOA(IDPESSOA);
    
ALTER TABLE CONTATO
	ADD CONSTRAINT FK_CONTATO_TIPOCONTATO
    FOREIGN KEY(ID_TIPOCONTATO)
    REFERENCES TIPOCONTATO(IDTIPOCONTATO);
    
ALTER TABLE EMAIL
	ADD CONSTRAINT FK_EMAIL_PESSOA
    FOREIGN KEY(ID_PESSOA)
    REFERENCES PESSOA(IDPESSOA);
    
ALTER TABLE CONTATO
	ADD CONSTRAINT FK_CONTATO_PESSOA
    FOREIGN KEY(ID_PESSOA)
    REFERENCES PESSOA(IDPESSOA);
    
ALTER TABLE AGENDA
	ADD CONSTRAINT FK_AGENDA_PESSOAFIS
    FOREIGN KEY(ID_PESSOAFIS)
    REFERENCES PESSOAFIS(IDPESSOAFIS);
    
ALTER TABLE AGENDA
	ADD CONSTRAINT FK_AGENDA_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);

ALTER TABLE AGENDA
	ADD CONSTRAINT FK_AGENDA_PROCEDIMENTO
    FOREIGN KEY(ID_PROCED)
    REFERENCES PROCEDIMENTO(IDPROCED);
    
ALTER TABLE AGENDA
	MODIFY COLUMN SITUAGEN ENUM('1','2','3') NOT NULL DEFAULT '1'
    COMMENT '1 - AGUARDANDO; 2 - ATENDIDO; 3 - CANCELADO';
    
ALTER TABLE PACIENTE
	ADD CONSTRAINT FK_PACIENTE_PESSOAFIS
    FOREIGN KEY(ID_PESSOAFIS)
    REFERENCES PESSOAFIS(IDPESSOAFIS);

ALTER TABLE PRONTUARIO
	ADD CONSTRAINT FK_PRONTUARIO_PACIENTE
    FOREIGN KEY(ID_PACIENTE)
    REFERENCES PACIENTE(IDPACIENTE);
    
ALTER TABLE PRONTUARIO
	ADD CONSTRAINT FK_PRONTUARIO_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);

ALTER TABLE PRONTUARIO
	ADD CONSTRAINT FK_PRONTUARIO_ESPECIALIDADE
    FOREIGN KEY(ID_ESPEC)
    REFERENCES ESPECIALIDADE(IDESPEC);
    
ALTER TABLE PRONTUARIO
	ADD CONSTRAINT FK_PRONTUARIO_PROCEDIMENTO
    FOREIGN KEY(ID_PROCED)
    REFERENCES PROCEDIMENTO(IDPROCED);
    
ALTER TABLE PROFISSIONAL
	ADD CONSTRAINT FK_PROFISSIONAL_PESSOAFIS
    FOREIGN KEY(ID_PESSOAFIS)
    REFERENCES PESSOAFIS(IDPESSOAFIS);

ALTER TABLE PROFISSIONAL
	ADD CONSTRAINT FK_PROFISSIONAL_PROFISSIONAL
    FOREIGN KEY(ID_SUPPROFI)
    REFERENCES PROFISSIONAL(IDPROFISSIO);
    
ALTER TABLE PROFISSIONAL
	ADD CONSTRAINT FK_PROFISSIONAL_CONSEPROFI
    FOREIGN KEY(ID_CONSEPROFI)
    REFERENCES CONSEPROFI(IDCONSEPROFI);
    
ALTER TABLE PROFI_ESPEC
	ADD CONSTRAINT FK_PROFIESPEC_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);

ALTER TABLE PROFI_ESPEC
	ADD CONSTRAINT FK_PROFIESPEC_ESPECIALIDADE
    FOREIGN KEY(ID_ESPEC)
    REFERENCES ESPECIALIDADE(IDESPEC);

ALTER TABLE ESPECPROCED
	ADD CONSTRAINT FK_ESPECPROCED_ESPECIALIDADE
    FOREIGN KEY(ID_ESPEC)
    REFERENCES ESPECIALIDADE(IDESPEC);
    
ALTER TABLE ESPECPROCED
	ADD CONSTRAINT FK_ESPECPROCED_PROCEDIMENTO
    FOREIGN KEY(ID_PROCED)
    REFERENCES PROCEDIMENTO(IDPROCED);

ALTER TABLE USUARIO
	ADD CONSTRAINT FK_USUARIO_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);
    
ALTER TABLE USUAPERMIUSUA
	ADD CONSTRAINT FK_USUAPERMIUSUA_USUARIO
    FOREIGN KEY(ID_USUARIO)
    REFERENCES USUARIO(IDUSUARIO);
    
ALTER TABLE USUAPERMIUSUA
	ADD CONSTRAINT FK_USUAPERMIUSUA_PERMIUSUA
    FOREIGN KEY(ID_PERMIUSUA)
    REFERENCES PERMIUSUA(IDPERMIUSUA);
    
ALTER TABLE VENDA
	ADD CONSTRAINT FK_VENDA_PESSOA
    FOREIGN KEY(ID_PESSOA)
    REFERENCES PESSOA(IDPESSOA);
    
ALTER TABLE ITEMVENDA
	ADD CONSTRAINT FK_ITEMVENDA_VENDA
    FOREIGN KEY(ID_VENDA)
    REFERENCES VENDA(IDVENDA);

ALTER TABLE ITEMVENDA
	ADD CONSTRAINT FK_ITEMVENDA_ESPECIALIDADE
    FOREIGN KEY(ID_ESPEC)
    REFERENCES ESPECIALIDADE(IDESPEC);

ALTER TABLE ITEMVENDA
	ADD CONSTRAINT FK_ITEMVENDA_PROCEDIMENTO
    FOREIGN KEY(ID_PRECED)
    REFERENCES PROCEDIMENTO(IDPROCED);
    
ALTER TABLE ITEMVENDA
	ADD CONSTRAINT FK_ITEMVENDA_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);
    
ALTER TABLE MOVCONTABIL
	ADD CONSTRAINT FK_MOVCONTABIL_ORDEMCOMPRA
    FOREIGN KEY(ID_ORDCOMP)
    REFERENCES ORDEMCOMPRA(IDORDCOMP);
    
ALTER TABLE MOVCONTABIL
	ADD CONSTRAINT FK_MOVCONTABIL_ITEMVENDA
    FOREIGN KEY(ID_ITEMVENDA)
    REFERENCES ITEMVENDA(IDITEMVENDA);

ALTER TABLE USUARIO
	ADD CONSTRAINT FK_USUARIO_PESSOAFIS
    FOREIGN KEY(ID_PESSOAFIS)
    REFERENCES PESSOAFIS(IDPESSOAFIS);
    
ALTER TABLE MOVCONTABIL
	ADD CONSTRAINT FK_MOVCONTABIL_PLANOCONTA
    FOREIGN KEY(ID_PLANOCONTA)
    REFERENCES PLANOCONTA(IDPLANOCONTA);
    
ALTER TABLE INSCRIFISCAL
	ADD CONSTRAINT FK_CONTABIL_MOVCONTABIL
    FOREIGN KEY(ID_MOVCONTAB)
    REFERENCES MOVCONTABIL(IDMOVCONTAB);
    
ALTER TABLE PRODUTO
	ADD CONSTRAINT FK_PRODUTO_UNIMEDIDA
    FOREIGN KEY(ID_UNMEDI)
    REFERENCES UNIMEDIDA(IDUNMEDI);

ALTER TABLE PRODUTO
	ADD CONSTRAINT FK_PRODUTO_ALMOXARIFADO
    FOREIGN KEY(ID_ALMOX)
    REFERENCES ALMOXARIFADO(IDALMOX);
    
ALTER TABLE FORNECPROD
	ADD CONSTRAINT FK_FORNECPROD_FORNECEDOR
    FOREIGN KEY (ID_FORNECEDOR)
    REFERENCES FORNECEDOR(IDFORNECEDOR);
    
ALTER TABLE FORNECPROD
	ADD CONSTRAINT FK_FORNECPROD_PRODUTO
    FOREIGN KEY (ID_PRODUTO)
    REFERENCES PRODUTO(IDPRODUTO);
    
ALTER TABLE ESTOQUE
	ADD CONSTRAINT FK_ESTOQUE_PRODUTO
    FOREIGN KEY (ID_PRODUTO)
    REFERENCES PRODUTO(IDPRODUTO);
    
ALTER TABLE ESTOQUE
	ADD CONSTRAINT FK_ESTOQUE_LOTE
    FOREIGN KEY (ID_LOTE)
    REFERENCES LOTE(IDLOTE);
 
ALTER TABLE MOVIMENTACAO
	ADD CONSTRAINT FK_MOVIMENTACAO_ESTOQUE
	FOREIGN KEY (ID_ESTOQUE)
	REFERENCES ESTOQUE(IDESTOQUE);

ALTER TABLE MOVIMENTACAO
	ADD CONSTRAINT FK_MOVIMENTACAO_USUARIO
    FOREIGN KEY (ID_USUARIO)
    REFERENCES USUARIO(IDUSUARIO);
    
ALTER TABLE MOVIMENTACAO
	ADD CONSTRAINT FK_MOVIMENTACAO_SETOR_O
    FOREIGN KEY (ID_SETOR_ORIGEM)
    REFERENCES SETOR(IDSETOR);
    
ALTER TABLE MOVIMENTACAO
	ADD CONSTRAINT FK_MOVIMENTACAO_SETOR_D
    FOREIGN KEY (ID_SETOR_DESTINO)
    REFERENCES SETOR(IDSETOR);
    
ALTER TABLE PRODSOLIC
	ADD CONSTRAINT FK_PRODSOLIC_ESTOQUE
    FOREIGN KEY(ID_ESTOQUE)
    REFERENCES ESTOQUE(IDESTOQUE);

ALTER TABLE PRODSOLIC
	ADD CONSTRAINT FK_PRODSOLIC_LISTAPRODSOL
    FOREIGN KEY(ID_LISTAPRODSOL)
    REFERENCES LISTAPRODSOL(IDLISTAPRODSOL);
    
ALTER TABLE LISTAPRODSOL
	ADD CONSTRAINT FK_LISTAPRODSOL_USUARIO
    FOREIGN KEY(ID_USUARIO)
    REFERENCES USUARIO(IDUSUARIO);

ALTER TABLE LISTAPRODSOLSOL
	ADD CONSTRAINT FK_LISTAPRODSOLSOL_LISTAPRODSOL
    FOREIGN KEY(ID_LISTAPRODSOL)
    REFERENCES LISTAPRODSOL(IDLISTAPRODSOL);
    
ALTER TABLE LISTAPRODSOLSOL
	ADD CONSTRAINT FK_LISTAPRODSOLSOL_PRODSOLIC
    FOREIGN KEY(ID_PRODSOLIC)
    REFERENCES PRODSOLIC(IDPRODSOLIC);

ALTER TABLE LISTAPRODSOLSOL
	ADD CONSTRAINT UQ_LISTAPRODSOLSOL
    UNIQUE(ID_LISTAPRODSOL, ID_PRODSOLIC);
    
ALTER TABLE RELATMOVIM
	ADD CONSTRAINT FK_RELATMOVIM_USUARIO
    FOREIGN KEY(ID_USUARIO)
    REFERENCES USUARIO(IDUSUARIO);

ALTER TABLE RELATMOVIMMOVIM
	ADD CONSTRAINT FK_RELATMOVIMMOVIM_RELATMOVIM
    FOREIGN KEY(ID_RELATMOVIM)
    REFERENCES RELATMOVIM(IDRELATMOVIM);
    
ALTER TABLE RELATMOVIMMOVIM
	ADD CONSTRAINT FK_RELATMOVIMMOVIM_MOVIMENTACAO
    FOREIGN KEY(ID_MOVIMENTACAO)
    REFERENCES MOVIMENTACAO(IDMOVIMENTACAO);
    
ALTER TABLE MOVPRODSOL
	ADD CONSTRAINT FK_MOVPRODSOL_LISTAPRODSOL
    FOREIGN KEY(ID_LISTAPRODSOL)
    REFERENCES LISTAPRODSOL(IDLISTAPRODSOL);
    
ALTER TABLE MOVPRODSOL
	ADD CONSTRAINT FK_MOVPRODSOL_MOVIMENTACAO
    FOREIGN KEY(ID_MOVIMENTACAO)
    REFERENCES MOVIMENTACAO(IDMOVIMENTACAO);
    
ALTER TABLE MOVPRODSOL
	ADD CONSTRAINT FK_MOVPRODSOL_PRODSOLIC
    FOREIGN KEY(ID_PRODSOLIC)
    REFERENCES PRODSOLIC(IDPRODSOLIC);
    
ALTER TABLE FORNECEDOR
	ADD CONSTRAINT FK_FORNECEDOR_PESSOA
    FOREIGN KEY(ID_PESSOA)
    REFERENCES PESSOA(IDPESSOA);
    
ALTER TABLE COTACAO
	ADD CONSTRAINT FK_COTACAO_ITEMSOLIC
    FOREIGN KEY(ID_ITEMSOLIC)
    REFERENCES ITEMSOLIC(IDITEMSOLIC);
    
ALTER TABLE COTACAO
	ADD CONSTRAINT FK_COTACAO_REGSOLIC
    FOREIGN KEY(ID_REGSOLIC)
    REFERENCES REGSOLIC(IDREGSOLIC);
    
ALTER TABLE COTACAO
	ADD CONSTRAINT FK_COTACAO_FORNECEDOR
    FOREIGN KEY(ID_FORNECEDOR)
    REFERENCES FORNECEDOR(IDFORNECEDOR);

ALTER TABLE SETORUSUA
	ADD CONSTRAINT FK_SETORUSUA_USUARIO
    FOREIGN KEY(ID_USUARIO)
    REFERENCES USUARIO(IDUSUARIO);

ALTER TABLE SETORUSUA
	ADD CONSTRAINT FK_SETORUSUA_SETOR
    FOREIGN KEY(ID_SETOR)
    REFERENCES SETOR(IDSETOR);
    
ALTER TABLE ALMOXARIFADO
	ADD CONSTRAINT FK_ALMOXARIFADO_SETOR
    FOREIGN KEY(ID_SETOR)
    REFERENCES SETOR(IDSETOR);
    
ALTER TABLE ITEM_ORDCOMP
	ADD CONSTRAINT FK_ITEMORDCOMP_ORDEMCOMPRA
    FOREIGN KEY(ID_ORDCOMP)
    REFERENCES ORDEMCOMPRA(IDORDCOMP);

ALTER TABLE ITEM_ORDCOMP
	ADD CONSTRAINT FK_ITEMORDCOMP_PRODUTO
    FOREIGN KEY(ID_PRODUTO)
    REFERENCES PRODUTO(IDPRODUTO);
    
ALTER TABLE LOTE
	ADD CONSTRAINT FK_LOTE_ORDEMCOMPRA
    FOREIGN KEY(ID_ORDCOMP)
    REFERENCES ORDEMCOMPRA(IDORDCOMP);
    
ALTER TABLE SETOR
	ADD CONSTRAINT FK_SETOR_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);
    
ALTER TABLE REGSOLIC
	ADD CONSTRAINT FK_REGSOLIC_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);
    
ALTER TABLE REGSOLIC
	ADD CONSTRAINT FK_REGSOLIC_SETOR
    FOREIGN KEY(ID_SETOR)
    REFERENCES SETOR(IDSETOR);
    
ALTER TABLE ITEMSOLIC
	ADD CONSTRAINT FK_ITEMSOLIC_PRODUTO
    FOREIGN KEY(ID_PRODUTO)
    REFERENCES PRODUTO(IDPRODUTO);
    
ALTER TABLE EQUIPAMENTO
	ADD CONSTRAINT FK_EQUIPAMENTO_SETOR
    FOREIGN KEY(ID_SETOR)
    REFERENCES SETOR(IDSETOR);
    
ALTER TABLE MANUTEQUIPA
	ADD CONSTRAINT FK_MANUTEQUIPA_PESSOAJUR
    FOREIGN KEY(ID_PESSOAJUR)
    REFERENCES PESSOAJUR(IDPESSOAJUR);
    
ALTER TABLE ANAMNESE
	ADD CONSTRAINT FK_ANAMNESE_PACIENTE
    FOREIGN KEY(ID_PACIENTE)
    REFERENCES PACIENTE(IDPACIENTE);
    
ALTER TABLE ANAMNESE
	ADD CONSTRAINT FK_ANAMNESE_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);
    
ALTER TABLE PERGMODU
	ADD CONSTRAINT FK_PERGMODU_MODULO
    FOREIGN KEY(ID_MODULO)
    REFERENCES MODULO(IDMODULO);
    
ALTER TABLE PERGMODU
	ADD CONSTRAINT FK_PERGMODU_PERGUNTA
    FOREIGN KEY(ID_PERGUNTA)
    REFERENCES PERGUNTA(IDPERGUNTA);
    
ALTER TABLE RESPOSTA
	ADD CONSTRAINT FK_RESPOSTA_PERGUNTA
    FOREIGN KEY(ID_PERGUNTA)
    REFERENCES PERGUNTA(IDPERGUNTA);
    
ALTER TABLE RESPOSTA
	ADD CONSTRAINT FK_RESPOSTA_ANAMNESE
    FOREIGN KEY(ID_ANAMNESE)
    REFERENCES ANAMNESE(IDANAMNESE);

ALTER TABLE PROCPRESC
	ADD CONSTRAINT FK_PROCPRESC_ANAMNESE
    FOREIGN KEY(ID_ANAMNESE)
    REFERENCES ANAMNESE(IDANAMNESE);
    
ALTER TABLE PROCPRESC
	ADD CONSTRAINT FK_PROCPRESC_PROCEDIMENTO
    FOREIGN KEY(ID_PROCED)
    REFERENCES PROCEDIMENTO(IDPROCED);
    
ALTER TABLE PROCPRESCAGE
	ADD CONSTRAINT FK_PROCPRESCAGE_PROCPRESC
    FOREIGN KEY(ID_PROCPRESC)
    REFERENCES PROCPRESC(IDPROCPRESC);
    
ALTER TABLE PROCPRESCAGE
	ADD CONSTRAINT FK_PROCPRESCAGE_AGENDA
    FOREIGN KEY(ID_AGENDA)
    REFERENCES AGENDA(IDAGENDA);
    
ALTER TABLE PROCPRESCATE
	ADD CONSTRAINT FK_PROCPRESCATE_PROCPRESC
    FOREIGN KEY(ID_PROCPRESC)
    REFERENCES PROCPRESC(IDPROCPRESC);
    
ALTER TABLE PROCPRESCATE
	ADD CONSTRAINT FK_PROCPRESCATE_PRONTUARIO
    FOREIGN KEY(ID_PRONTU)
    REFERENCES PRONTUARIO(IDPRONTU);
    
ALTER TABLE EXERCPRESC
	ADD CONSTRAINT FK_EXERCPRESC_EXERCICIO
    FOREIGN KEY(ID_EXERCICIO)
    REFERENCES EXERCICIO(IDEXERCICIO);
    
ALTER TABLE EXERCPRESC
	ADD CONSTRAINT FK_EXERCPRESC_ANAMNESE
    FOREIGN KEY(ID_ANAMNESE)
    REFERENCES ANAMNESE(IDANAMNESE);
    
ALTER TABLE EXERCREALIZADO
	ADD CONSTRAINT FK_EXERCREALIZADO_EXERCPRESC
    FOREIGN KEY(ID_EXERCPRESC)
    REFERENCES EXERCPRESC(IDEXERCPRESC);
    
ALTER TABLE TOKENFISIO
	ADD CONSTRAINT FK_TOKENFISIO_ANAMNESE
    FOREIGN KEY(ID_ANAMNESE)
    REFERENCES ANAMNESE(IDANAMNESE);
    
ALTER TABLE ATENDIFISIO
	ADD CONSTRAINT FK_ATENDIFISIO_PACIENTE
    FOREIGN KEY(ID_PACIENTE)
    REFERENCES PACIENTE(IDPACIENTE);
    
ALTER TABLE ATENDIFISIO
	ADD CONSTRAINT FK_ATENDIFISIO_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);
    
ALTER TABLE ATENDIFISIO
	ADD CONSTRAINT FK_ATENDIFISIO_PROCEDIMENTO
    FOREIGN KEY(ID_PROCED)
    REFERENCES PROCEDIMENTO(IDPROCED);
    
ALTER TABLE AVALNUTRI
	ADD CONSTRAINT FK_AVALNUTRI_PACIENTE
    FOREIGN KEY(ID_PACIENTE)
    REFERENCES PACIENTE(IDPACIENTE);
    
ALTER TABLE AVALNUTRI
	ADD CONSTRAINT FK_AVALNUTRI_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);
    
ALTER TABLE AVALNUTRI
	ADD CONSTRAINT FK_AVALNUTRI_PROCEDIMENTO
    FOREIGN KEY(ID_PROCED)
    REFERENCES PROCEDIMENTO(IDPROCED);
    
ALTER TABLE AVALNUTRI
	ADD CONSTRAINT FK_AVALNUTRI_RESULEXAME
    FOREIGN KEY(ID_RESULEXAME)
    REFERENCES RESULEXAME(IDRESULEXAME);
    
ALTER TABLE EVOLNUTRI
	ADD CONSTRAINT FK_EVOLNUTRI_PACIENTE
    FOREIGN KEY(ID_PACIENTE)
    REFERENCES PACIENTE(IDPACIENTE);
    
ALTER TABLE METODEXAME
	ADD CONSTRAINT FK_METODEXAME_PROCEDIMENTO
    FOREIGN KEY(ID_PROCED)
    REFERENCES PROCEDIMENTO(IDPROCED);
    
ALTER TABLE RESULEXAME
	ADD CONSTRAINT FK_RESULEXAME_AGENDA
    FOREIGN KEY(ID_AGENDA)
    REFERENCES AGENDA(IDAGENDA);
    
ALTER TABLE RESULEXAME
	ADD CONSTRAINT FK_RESULEXAME_LOCCOLET
    FOREIGN KEY(ID_LOCCOLET)
    REFERENCES LOCCOLET(IDLOCCOLET);
    
ALTER TABLE RESULEXAME
	ADD CONSTRAINT FK_RESULEXAME_PROCEDIMENTO
    FOREIGN KEY(ID_PROCED)
    REFERENCES PROCEDIMENTO(IDPROCED);
    
ALTER TABLE RESULEXAME
	ADD CONSTRAINT FK_RESULEXAME_PACIENTE
    FOREIGN KEY(ID_PACIENTE)
    REFERENCES PACIENTE(IDPACIENTE);
    
ALTER TABLE RESULEXAME
	ADD CONSTRAINT FK_RESULEXAME_METODEXAME
    FOREIGN KEY(ID_METODEXAME)
    REFERENCES METODEXAME(IDMETODEXAME);
    
ALTER TABLE ATENDIODONTO
	ADD CONSTRAINT FK_ATENDIODONTO_PACIENTE
    FOREIGN KEY(ID_PACIENTE)
    REFERENCES PACIENTE(IDPACIENTE);
    
ALTER TABLE ATENDIODONTO
	ADD CONSTRAINT FK_ATENDIODONTO_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);
    
ALTER TABLE ATENDIODONTO
	ADD CONSTRAINT FK_ATENDIODONTO_PROCEDIMENTO
    FOREIGN KEY(ID_PROCED)
    REFERENCES PROCEDIMENTO(IDPROCED);
    
ALTER TABLE SOLIODONTO
	ADD CONSTRAINT FK_SOLIODONTO_PACIENTE
    FOREIGN KEY(ID_PACIENTE)
    REFERENCES PACIENTE(IDPACIENTE);
    
ALTER TABLE SOLIODONTO
	ADD CONSTRAINT FK_SOLIODONTO_PROFISSIONAL
    FOREIGN KEY(ID_PROFISSIO)
    REFERENCES PROFISSIONAL(IDPROFISSIO);
    
ALTER TABLE SOLIODONTO
	ADD CONSTRAINT FK_SOLIODONTO_PROCEDIMENTO
    FOREIGN KEY(ID_PROCED)
    REFERENCES PROCEDIMENTO(IDPROCED);

ALTER TABLE SOLIODONTO
	ADD CONSTRAINT FK_SOLIODONTO_USUARIO
    FOREIGN KEY(ID_USUARIO)
    REFERENCES USUARIO(IDUSUARIO);

-- INDICES --

CREATE INDEX IDX_PESSOAFIS_NOMEPESSOA ON PESSOAFIS(NOMEPESSOA);

CREATE INDEX IDX_PESSOAJUR_RAZSOCIAL ON PESSOAJUR(RAZSOCIAL);

CREATE INDEX IDX_PESSOAJUR_NOMEFAN ON PESSOAJUR(NOMEFAN);

CREATE INDEX IDX_EMAIL_EMAIL ON EMAIL(EMAIL);

CREATE INDEX IDX_CIDADE_CIDADE ON CIDADE(CIDADE);

CREATE INDEX IDX_PACIENTE_RGPACIENTE ON PACIENTE(RGPACIENTE);

CREATE INDEX IDX_PROCEDIMENTO_DESCRPROC ON PROCEDIMENTO(DESCRPROC);

CREATE INDEX IDX_PRODUTO_NOME ON PRODUTO(NOME);

CREATE INDEX IDX_PERGUNTA_PERGUNTA ON PERGUNTA(PERGUNTA);

-- UNIQUES --

ALTER TABLE PERGMODU
	ADD CONSTRAINT UQ_PERGMODU
	UNIQUE (ID_PERGUNTA, ID_MODULO);
    
ALTER TABLE EMAIL
	ADD CONSTRAINT UQ_EMAIL
    UNIQUE(EMAIL, ID_PESSOA);
    
ALTER TABLE PROFI_ESPEC
	ADD CONSTRAINT UQ_PROFI_ESPEC
    UNIQUE(ID_PROFISSIO, ID_ESPEC);
    
ALTER TABLE USUAPERMIUSUA
	ADD CONSTRAINT UQ_USUAPERMIUSUA
    UNIQUE(ID_USUARIO, ID_PERMIUSUA);

ALTER TABLE ESPECPROCED
	ADD CONSTRAINT UQ_ESPECPROCED
    UNIQUE(ID_PROCED, ID_ESPEC);
    
ALTER TABLE SETORUSUA
	ADD CONSTRAINT UQ_SETORUSUA
    UNIQUE(ID_USUARIO, ID_SETOR);
    
ALTER TABLE PROCPRESCAGE
	ADD CONSTRAINT UQ_PROCPRESCAGE
    UNIQUE(ID_PROCPRESC, ID_AGENDA);
    
ALTER TABLE FORNECPROD
	ADD CONSTRAINT UQ_FORNECPROD
    UNIQUE (ID_FORNECEDOR, ID_PRODUTO);

ALTER TABLE USUARIO
ADD CONSTRAINT CK_USUARIO_IDPESSOAFIS_IDPROFISSIO
CHECK (
    ID_PROFISSIO IS NULL OR ID_PESSOAFIS IS NULL
);

-- PROCEDURES --

DELIMITER $$

/*
--- REGISTRAR PESSOA FÍSICA ---
EXEMPLO DE USO:
CALL SP_INSERT_PESSOAFIS(
	'José Mangolino',		--NOME COMPLETO
    '12345678901',			--CPF
    '2001-09-11',			--DATA DE NASCIMENTO
    'M'						--SEXO
    );
*/

CREATE PROCEDURE SP_INSERT_PESSOAFIS(
	IN NOME VARCHAR(100),
    IN CPF CHAR(11),
    IN DATANASC DATE,
    IN SEXO ENUM('F','M')
    )
    BEGIN
    
    DECLARE VAR_ID_PESSOA INT;
    
		INSERT INTO PESSOA(TIPOPESSOA)
			VALUES('F');
		SET VAR_ID_PESSOA = LAST_INSERT_ID();
        INSERT INTO PESSOAFIS(ID_PESSOA,CPFPESSOA,NOMEPESSOA,DATANASCPES,SEXOPESSOA)
			VALUES(VAR_ID_PESSOA,CPF,NOME,DATANASC,SEXO);
	END$$

DELIMITER ;

DELIMITER $$

/*
--- REGISTRAR PACIENTE COM EMAIL ---
EXEMPLO DE USO:
CALL SP_INSERT_PACIENTE_C_EMAIL(
    'João da Silva',  -- Nome
    '12345678901',    -- CPF (11 caracteres, sem pontos e traços)
    '1985-05-20',     -- Data de nascimento (YYYY-MM-DD)
    'M',              -- Sexo ('M' ou 'F')
    '1234567',      -- RG
    'MG',             -- Estado do RG (UF)
    'joao@email.com'  -- E-mail
);
*/

CREATE PROCEDURE SP_INSERT_PACIENTE_C_EMAIL(
	IN NOME VARCHAR(100),
    IN CPF CHAR(11),
    IN DATANASC DATE,
    IN SEXO ENUM('F','M'),
    IN RG VARCHAR(15),
    IN ESTADORG CHAR(2),
    IN V_EMAIL VARCHAR(100)
    )
    BEGIN
    
    DECLARE VAR_ID_PESSOA INT;
    DECLARE VAR_ID_PESSOAFIS INT;
    
		INSERT INTO PESSOA(TIPOPESSOA)
			VALUES('F');
		SET VAR_ID_PESSOA = LAST_INSERT_ID();
        INSERT INTO PESSOAFIS(ID_PESSOA,CPFPESSOA,NOMEPESSOA,DATANASCPES,SEXOPESSOA)
			VALUES(VAR_ID_PESSOA,CPF,NOME,DATANASC,SEXO);
		SET VAR_ID_PESSOAFIS = LAST_INSERT_ID();
		INSERT INTO EMAIL(EMAIL, ID_PESSOA)
			VALUES(V_EMAIL, VAR_ID_PESSOA);
        INSERT INTO PACIENTE(ID_PESSOAFIS, RGPACIENTE, ESTDORGPAC)
			VALUES (VAR_ID_PESSOAFIS, RG, ESTADORG);
        END$$

DELIMITER ;

DELIMITER $$

/*
-- REGISTRAR PESSOA JURIDICA --
EXEMPLO DE USO:
CALL SP_INSERT_PESSOAJUR(
    '12345678000199',			--CNPJ
    'Fasipe LTDA',				--RAZAO SOCIAL
    'Faculdade Unifasipe',		--FANTASIA
    '6201500'					--CNAE (PODE SER NULL)
);
*/

CREATE PROCEDURE SP_INSERT_PESSOAJUR(
	IN CNPJ_JUR CHAR(14),
    IN RAZAO VARCHAR(100),
    IN FANTA VARCHAR(100),
    IN CNAEJ CHAR(7)
    )
    BEGIN
    
    DECLARE VAR_ID_PESSOA INT;
    
		INSERT INTO PESSOA(TIPOPESSOA)
			VALUES('J');
            
		SET VAR_ID_PESSOA = LAST_INSERT_ID();
        
        INSERT INTO PESSOAJUR(ID_PESSOA,CNPJ,RAZSOCIAL,NOMEFAN,CNAE)
			VALUES(VAR_ID_PESSOA,CNPJ_JUR,RAZAO,FANTA,CNAEJ);
            
	END $$

DELIMITER ;

DELIMITER $$

/*
CALL SP_INSERT_PERGUNTA(
    'OBJETIVA',
    'Você faz uso de medicação contínua?',
    'COMUM'
);
*/
	CREATE PROCEDURE SP_INSERT_PERGUNTA(
		IN P_TIPO VARCHAR(10),
        IN P_PERGUNTA VARCHAR(255),
        IN P_MODULO VARCHAR(50)
        )
        BEGIN
			DECLARE P_IDMODULO INT;
			DECLARE P_IDPERGUNTA INT;
            DECLARE MSG VARCHAR(50);
			SET P_MODULO = UPPER(TRIM(P_MODULO));
			IF UPPER(TRIM(P_TIPO)) = 'OBJETIVA' THEN
				SET P_TIPO = 'O';
			ELSEIF UPPER(TRIM(P_TIPO)) = 'SUBJETIVA' THEN
				SET P_TIPO = 'S';
			ELSEIF UPPER(TRIM(P_TIPO)) = 'AMBAS' THEN
				SET P_TIPO = 'A';
			ELSE
				SET MSG = CONCAT('Tipo de pergunta inválida: ', P_TIPO);
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MSG;
			END IF;

			SET P_PERGUNTA = UPPER(TRIM(P_PERGUNTA));
                
			SET P_IDPERGUNTA = (
				SELECT IDPERGUNTA FROM PERGUNTA WHERE PERGUNTA = P_PERGUNTA LIMIT 1
                );

			SET P_IDMODULO = (
				SELECT IDMODULO FROM MODULO WHERE MODULO = P_MODULO LIMIT 1
			);
            
            IF P_IDPERGUNTA IS NOT NULL THEN
				IF P_IDMODULO IS NOT NULL THEN
					INSERT INTO PERGMODU(ID_PERGUNTA, ID_MODULO)
					VALUES (P_IDPERGUNTA, P_IDMODULO);
				ELSE
					INSERT INTO MODULO(MODULO)
                    VALUES (P_MODULO);
                    SET P_IDMODULO = LAST_INSERT_ID();
                    INSERT INTO PERGMODU(ID_PERGUNTA, ID_MODULO)
					VALUES (P_IDPERGUNTA, P_IDMODULO);
				END IF;
			ELSE
				INSERT INTO PERGUNTA(PERGUNTA, TIPO)
                VALUES (P_PERGUNTA, P_TIPO);
                SET P_IDPERGUNTA = LAST_INSERT_ID();
                IF P_IDMODULO IS NULL THEN
					INSERT INTO MODULO(MODULO)
                    VALUES (P_MODULO);
                    SET P_IDMODULO = LAST_INSERT_ID();
				END IF;
				INSERT INTO PERGMODU(ID_PERGUNTA, ID_MODULO)
				VALUES (P_IDPERGUNTA, P_IDMODULO);
			END IF;
		END $$
        
DELIMITER ;

-- VIEWS --
/*
INFORMAÇÕES COMPLETAS SOBRE PESSOAS FISICAS
EXEPLO DE USO:
	SELECT 
		IDPESSOA,
        IDPESSOAFIS,
		NOME,
		CPF,
		DATA_NASCIMENTO,
		SEXO,
		LOGRADOURO,
		NUMERO,
		BAIRRO,
		CEP,
		CIDADE,
		ESTADO,
		TIPO_ENDERECO,
		EMAIL,
        CONTATO,
		TIPO_CONTATO
	FROM VW_PESSOAFIS
	;
*/
CREATE VIEW VW_PESSOAFIS AS
	SELECT 
		P.IDPESSOA,
		F.IDPESSOAFIS,
		F.NOMEPESSOA AS NOME,
        F.CPFPESSOA AS CPF,
        F.DATANASCPES AS DATA_NASCIMENTO,
        F.SEXOPESSOA AS SEXO,
        CONCAT(L.TIPO, ' ', E.LOGRADOURO) AS LOGRADOURO,
        E.NUMEENDER AS NUMERO,
        E.BAIRRO,
        E.CEP,
        C.CIDADE,
        C.ESTADO,
        CASE E.TIPOENDER
			WHEN 'RES' THEN 'RESIDENCIAL'
            WHEN 'COM' THEN 'COMERCIAL'
            ELSE 'TIPO NAO LISTADO'
		END AS TIPO_ENDERECO,
        EM.EMAIL,
        CT.NUMERO AS CONTATO,
        TC.TIPO AS TIPO_CONTATO
	FROM PESSOAFIS F
    INNER JOIN PESSOA P ON F.ID_PESSOA = P.IDPESSOA
    LEFT JOIN ENDERECO E ON P.IDPESSOA = E.ID_PESSOA
    INNER JOIN TIPOLOGRADO L ON E.ID_TIPOLOGRA = L.IDTIPOLOGRA
    INNER JOIN CIDADE C ON E.ID_CIDADE = C.IDCIDADE
    LEFT JOIN CONTATO CT ON P.IDPESSOA = CT.ID_PESSOA
    INNER JOIN TIPOCONTATO TC ON CT.ID_TIPOCONTATO = TC.IDTIPOCONTATO
    LEFT JOIN EMAIL EM ON P.IDPESSOA = EM.ID_PESSOA
;

/*
INFORMAÇÕES COMPLETAS SOBRE PERGUNTAS DE ANAMNESE, USE ESSA VIEW PARA FILTRAR
PERGUNTAS POR MÓDULO.
EXEPLO DE USO:
SELECT
	IDPERGUNTA,
    PERGUNTA,
    TIPO,
    MODULO
FROM 
	VW_PERGUNTA_ANAMNESE
WHERE 1=1
AND MODULO IN ('COMUM', 'FISIOTERAPIA')
;
*/
CREATE VIEW VW_PERGUNTA_ANAMNESE AS
	SELECT
		P.IDPERGUNTA,
        P.PERGUNTA,
        CASE P.TIPO
			WHEN 'O' THEN 'OBJETETIVA'
            WHEN 'S' THEN 'SUBJETIVA'
            WHEN 'A' THEN 'AMBAS'
            ELSE 'NAO LISTADO'
		END AS TIPO,
        M.MODULO
	FROM PERGUNTA P
    INNER JOIN PERGMODU PM ON PM.ID_PERGUNTA = P.IDPERGUNTA
    INNER JOIN MODULO M ON M.IDMODULO = PM.ID_MODULO
;

-- TRIGGERS --
DELIMITER $$

CREATE TRIGGER TG_BLOCK_DUAL_FK_INSERT_USUARIO
BEFORE INSERT ON USUARIO
FOR EACH ROW
BEGIN
    IF (NEW.ID_PROFISSIO IS NULL AND NEW.ID_PESSOAFIS IS NULL)
        OR (NEW.ID_PROFISSIO IS NOT NULL AND NEW.ID_PESSOAFIS IS NOT NULL) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'É obrigatório preencher somente um dos campos: ID_PROFISSIO ou ID_PESSOAFIS.';
    END IF;
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER TG_BLOCK_DUAL_FK_UPDATE_USUARIO
BEFORE UPDATE ON USUARIO
FOR EACH ROW
BEGIN
    IF (NEW.ID_PROFISSIO IS NULL AND NEW.ID_PESSOAFIS IS NULL)
        OR (NEW.ID_PROFISSIO IS NOT NULL AND NEW.ID_PESSOAFIS IS NOT NULL) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'É obrigatório preencher somente um dos campos: ID_PROFISSIO ou ID_PESSOAFIS.';
    END IF;
END$$

DELIMITER ;


COMMIT;